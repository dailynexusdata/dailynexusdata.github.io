{"version":3,"file":"component---src-guides-d-3-scales-md-6ec70a9cd30e53d7d2e0.js","mappings":"+OAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,gCACA,6JACA,iFACA,oBAAK,gBAAMC,WAAW,MAClB,UAAa,eADZ,+IAcL,6DACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,mLAWL,wFAA0E,sBAAYA,WAAW,KAAvB,OAA1E,eACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,qEAML,2CAA6B,sBAAYA,WAAW,KAAvB,OAA7B,kIAA8M,sBAAYA,WAAW,KAAvB,OAA9M,0FACA,iMAAmL,sBAAYA,WAAW,KAAvB,iBAAnL,sBAAkQ,sBAAYA,WAAW,KAAvB,OAAlQ,+CACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,0KAQL,0GACA,eAAKC,IAAI,yCACT,uIAAyH,sBAAYD,WAAW,KAAvB,+BAAzH,uEAAuQ,sBAAYA,WAAW,KAAvB,cAAvQ,uCACA,yGAA2F,sBAAYA,WAAW,KAAvB,UAA3F,iCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,uFAML,0CAA4B,sBAAYA,WAAW,KAAvB,OAA5B,qDAAgI,sBAAYA,WAAW,KAAvB,cAAhI,wDACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,6HAML,sEAAwD,sBAAYA,WAAW,KAAvB,WAAxD,QAAmH,sBAAYA,WAAW,KAAvB,UAAnH,sFAA2P,sBAAYA,WAAW,KAAvB,sCAA3P,mFACA,0BAAY,sBAAYA,WAAW,KAAvB,KAAZ,SAAkE,sBAAYA,WAAW,KAAvB,KAAlE,gJACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,4CAQTJ,EAAWM,gBAAiB","sources":["webpack://guide/./src/guides/d3/scales.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/nexus/data-gh/guide/src/components/layout/layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`D3 Scales`}</h1>\n    <p>{`Scales in D3 provide a way to convert from out data as numbers or string names to pixel locations to help use place objects on our svg.`}</p>\n    <p>{`Typically, we'll have our size and margin setup as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const size = {\n    width: 600,\n    height: 400\n}\n\nconst margin = {\n    top: 10,\n    left: 10,\n    bottom: 10,\n    right: 10\n}\n`}</code></pre>\n    <p>{`And suppose we have the following data:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(data)\n// the data:\n// [\n//     { val: 1, year: 2001 },\n//     { val: 3, year: 2006 },\n//     { val: 5, year: 2011 },\n//     { val: 1, year: 2016 },\n// ]\n`}</code></pre>\n    <p>{`One function that will be helpful in setting out our scales is the `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { max } from \"d3-array\";\n\nmax(data, d => d.val) // 5\n`}</code></pre>\n    <p>{`The first argument of `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` is an array and the second is a function that is applied to each element in the array to get the specific value we want. The `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` function then returns the greatest of the values returned in the passed in function.`}</p>\n    <p>{`In the code below, we setup a y scale. Often, we'll want the y axis to start at zero and go up to include the greatest value. We can do this by specifying the domain to be `}<inlineCode parentName=\"p\">{`[0, maxValue]`}</inlineCode>{` where we use the `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{` function to calculate that maximum value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { scaleLinear } from \"d3-array\";\n\nconst y = scaleLinear()\n    .domain([0, max(data, d => d.val)])\n    .range([size.height - margin.bottom, margin.top])\n`}</code></pre>\n    <p>{`ScaleLinear creates a line to transform values in the domain to values in the range.`}</p>\n    <img src=\"../../static/images/scaleLinear.png\"></img>\n    <p>{`We'll want the y scale to be increasing going up, so the 0 value should correspond to the bottom of the svg, i.e. `}<inlineCode parentName=\"p\">{`size.height - margin.bottom`}</inlineCode>{` where the max value should correspond to the top of the svg, i.e. `}<inlineCode parentName=\"p\">{`margin.top`}</inlineCode>{`, which are passed into the range.`}</p>\n    <p>{`Similarly, we'll want to create an x scale but this time not start at 0. We can use `}<inlineCode parentName=\"p\">{`extent`}</inlineCode>{` to help us find our domain.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { extent } from \"d3-array\";\n\nextent(data, d => d.year) // [2001, 2016]\n`}</code></pre>\n    <p>{`Extent is similar to `}<inlineCode parentName=\"p\">{`max`}</inlineCode>{`, but returns an array of the min and max value: `}<inlineCode parentName=\"p\">{`[min, max]`}</inlineCode>{` and is useful especially when creating an x scale.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const x = scaleLinear()\n    .domain(extent(data, d => d.year))\n    .range([margin.left, size.width - margin.right])\n`}</code></pre>\n    <p>{`If you're ever doing a calculation inside of the `}<inlineCode parentName=\"p\">{`.domain`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`.range`}</inlineCode>{`, and the scale isn't working properly, you can check what the values as follows, `}<inlineCode parentName=\"p\">{`console.log(x.domain(), x.range())`}</inlineCode>{`. Calling these functions with no values returns the current domain and range.`}</p>\n    <p>{`Now, `}<inlineCode parentName=\"p\">{`x`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`y`}</inlineCode>{` are just functions that take in values in their domain and returns the pixel location on the svg where to place our elements. For example,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`x(2001) // 10, the margin.left value\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","src","isMDXComponent"],"sourceRoot":""}