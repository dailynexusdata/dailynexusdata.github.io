{"version":3,"file":"component---src-guides-wrangling-md-74b9b33bfc4420826177.js","mappings":"wPASaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAI5E,4DACA,4DACA,mBACE,cAAIC,WAAW,MAAf,qBACA,cAAIA,WAAW,MAAf,uBACA,cAAIA,WAAW,MAAf,qBAEF,uCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,iDAIL,0BACA,6GACA,2BAAa,sBAAYA,WAAW,KAAvB,UAAb,0CAAyG,sBAAYA,WAAW,KAAvB,SAAzG,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,yGAKL,QAAC,EAAAC,EAAD,CAAaC,IAAI,mCAAmCC,IAAI,OAAOJ,QAAQ,cAAvE,6XACA,6DACA,oBAAK,gBAAMC,WAAW,MAClB,UAAa,eADZ,gOAWL,+EACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,mGAKL,6BACA,sGACA,6DAA+C,sBAAYA,WAAW,KAAvB,aAA/C,UAA8G,sBAAYA,WAAW,KAAvB,KAA9G,sNAAiX,sBAAYA,WAAW,KAAvB,QAAjX,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,sGAKL,QAAC,EAAAC,EAAD,CAAaC,IAAI,sCAAsCC,IAAI,OAAOJ,QAAQ,cAA1E,gYACA,yCACA,gEACA,oBAAK,gBAAMC,WAAW,MAClB,UAAa,eADZ,oEAOL,uDACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,+CAIL,2CACA,4GACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,wFAKL,wCACA,8GACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,2IAQL,+BACA,6DACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,gFAKL,oDAAsC,sBAAYA,WAAW,KAAvB,YAAtC,4IACA,gCACA,+IAAiI,sBAAYA,WAAW,KAAvB,eACjI,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,oZAsBL,oIAAsH,sBAAYA,WAAW,KAAvB,UAAtH,4CAAoN,sBAAYA,WAAW,KAAvB,cAApN,MACA,uGAAyF,sBAAYA,WAAW,KAAvB,YAAzF,iDAA8L,sBAAYA,WAAW,KAAvB,UAA9L,UACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,iOAcTJ,EAAWQ,gBAAiB","sources":["webpack://guide/./src/guides/wrangling.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/nexus/data-gh/guide/src/components/layout/layout.js\";\nimport { StaticImage } from \"gatsby-plugin-image\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1>{`Data Wrangling and Manipulation in JS`}</h1>\n    <p>{`This guide goes over 3 major concepts:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Array Operations`}</li>\n      <li parentName=\"ul\">{`Javascript Objects`}</li>\n      <li parentName=\"ul\">{`Wrangling in D3`}</li>\n    </ul>\n    <h2>{`Array Operations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n`}</code></pre>\n    <h3>{`Map`}</h3>\n    <p>{`Map returns an array where a function is applied to each element of the original array.`}</p>\n    <p>{`Using `}<inlineCode parentName=\"p\">{`.map()`}</inlineCode>{` to return an array of the squares of `}<inlineCode parentName=\"p\">{`myArr`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const squares = myArr.map(x => x**2);\nconsole.log(squares); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\n`}</code></pre>\n    <StaticImage src=\"../../images/arrayMapExample.png\" alt=\"text\" mdxType=\"StaticImage\" />\n    <p>{`We can also use more complex functions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const factorials = myArr.map((x) => {\n    let prod = 1;\n    for (let i = 1; i <= x; ++i) {\n        prod *= i;\n    }\n    return prod;\n});\nconsole.log(factorials); // [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n`}</code></pre>\n    <p>{`The index of the element is passed in as the second item:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const indices = myArr.map((x, i) => i)\nconsole.log(indices) // [0, 1, 2, 3, 4, 5, 6, 7, 8]\n`}</code></pre>\n    <h3>{`Filter`}</h3>\n    <p>{`Filter returns an array of elements in the original array that meet a condition.`}</p>\n    <p>{`Get the even numbers of the array using `}<inlineCode parentName=\"p\">{`.filter()`}</inlineCode>{`. The `}<inlineCode parentName=\"p\">{`%`}</inlineCode>{` is the modulus operator which returns the remained after a division. When you divide an even number by 2, there should be a remainder of zero. .filter() returns the values where the passed in function returns `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const evenNumbers = myArr.filter(x => x % 2 === 0);\nconsole.log(evenNumbers); // [2, 4, 6, 8]\n`}</code></pre>\n    <StaticImage src=\"../../images/arrayFilterExample.png\" alt=\"text\" mdxType=\"StaticImage\" />\n    <h2>{`Javascript Objects`}</h2>\n    <p>{`Objects are key-value collections of data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myObj = {\n    name: \"Labyrinth\",\n    nWriters: 5\n};\n`}</code></pre>\n    <p>{`We can access items by their key:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(myObj.name); // \"Labyrinth\"\n`}</code></pre>\n    <h3>{`Object Destructuring`}</h3>\n    <p>{`We can values out of objects into individual variables with the same name as follows: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { name, nWriters } = myObj;\nconsole.log(name, nWriters) // \"Labyrinth\", 5\n`}</code></pre>\n    <h2>{`Wrangling with D3`}</h2>\n    <p>{`Often times our data will be arrays of objects. This array contains data for 3 students.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const students = [\n    { major: \"Math\", gpa: 3.00 },\n    { major: \"Compsci\", gpa: 3.50 },\n    { major: \"Compsci\", gpa: 3.75 }\n]\n`}</code></pre>\n    <h3>{`d3.max()`}</h3>\n    <p>{`We can get the max gpa of all students:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const maxGpa = d3.max(students, d => d.gpa)\nconsole.log(maxGpa) // 3.75\n`}</code></pre>\n    <p>{`The first argument passed into `}<inlineCode parentName=\"p\">{`d3.max()`}</inlineCode>{` has to be an array of values, then the second argument can be a function that returns a value for each element in the passed in array.`}</p>\n    <h3>{`d3.nest()`}</h3>\n    <p>{`Often, we'll want to group data by a common value. Here, we're going to group together students with the same major using `}<inlineCode parentName=\"p\">{`d3.nest()`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const nestedData = d3Collection\n    .nest()\n    .key((d) => d.major)\n    .entries(students)\n\nconsole.log(nestedData)\n// [\n//   { \n//       key: 'Math', \n//       values: [ { major: 'Math', gpa: 3 } ],\n//   },\n//   { \n//       key: 'Compsci', \n//       values: [ \n//           { major: 'Compsci', gpa: 3.5 }, \n//           { major: 'Compsci', gpa: 3.75 } \n//       ] \n//   }\n// ]\n`}</code></pre>\n    <p>{`Here, we tell d3 that we want to group values by the major, by passing in a function to get the major value in `}<inlineCode parentName=\"p\">{`.key()`}</inlineCode>{`. Then we pass the entire array in with `}<inlineCode parentName=\"p\">{`.entries()`}</inlineCode>{`.`}</p>\n    <p>{`If we wanted to get the max GPA by department, we can map this array and then use `}<inlineCode parentName=\"p\">{`d3.max()`}</inlineCode>{` to get the max value form each department's `}<inlineCode parentName=\"p\">{`values`}</inlineCode>{` key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const maxGpaByDept = nestedData.map(({ key, values }) => ({\n    key,\n    maxGPA: d3.max(values, (d) => d.gpa),\n}));\n\nconsole.log(maxGpaByDept);\n// [ { key: 'Math', maxGPA: 3 }, { key: 'Compsci', maxGPA: 3.75 } ]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","S","src","alt","isMDXComponent"],"sourceRoot":""}