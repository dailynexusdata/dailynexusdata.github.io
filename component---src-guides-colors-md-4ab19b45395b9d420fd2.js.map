{"version":3,"file":"component---src-guides-colors-md-4ab19b45395b9d420fd2.js","mappings":"qLAUsBA,E,yDAFTC,EAAe,GAOtBC,GALgBF,EAKU,YALF,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,cAASG,KAIZG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,QAACI,EAAD,iBAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,6BACA,qOACA,eAAKC,IAAI,6CACT,oJACA,4BACA,0JACA,QAACV,EAAD,CAAWW,KAAK,UAAUF,QAAQ,cAT7B,0GAWL,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,iCACA,0GACA,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,4FACA,oBAAK,gBAAMG,WAAW,MAClB,UAAa,eADZ,sIAML,qGACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,oJAOL,wDACA,QAACZ,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,QAACT,EAAD,CAAWW,KAAK,UAAUF,QAAQ,eAClC,8NAEA,sJACA,kBAAG,kBAAQG,WAAW,KAAnB,6EAAH,wFACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,qEAOL,gDACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,6EAOL,6FACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,mBAIL,4GACA,wCACA,uIACA,eAAKF,IAAI,0CAA0CG,OAAO,UAC1D,iFACA,oBAAK,gBAAMD,WAAW,MAClB,UAAa,eADZ,gNAQL,sDAAwC,aAAGA,WAAW,IAClD,KAAQ,4CAD4B,+BAAxC,MAOJL,EAAWO,gBAAiB","sources":["webpack://guide/./src/guides/colors.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/nexus/data-gh/guide/src/components/layout/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst ColorDisp = makeShortcode(\"ColorDisp\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Colors`}</h1>\n    <p>{`We want to use colors to highlight the important pattern we're trying to show with our charts. In the image below your eyes will automatically be drawn to the 3 dark red bars which are the noise complaints. `}</p>\n    <img src=\"../../static/images/colorhighlights.png\"></img>\n    <p>{`The entire point of this chart is to show the noise complaints so this use of color is effective in highlighting this pattern.`}</p>\n    <h2>{`Grays`}</h2>\n    <p>{`In plots where we want to gray out bars or lines, this gray color looks nice. Plus, it's easy to remember, it's just \"d3\" 3 times.`}</p>\n    <ColorDisp code=\"#d3d3d3\" mdxType=\"ColorDisp\"></ColorDisp>\nIf you have to have gray text, the above color is often too light so we can use a darker gray instead:\n    <ColorDisp code=\"#adadad\" mdxType=\"ColorDisp\"></ColorDisp>\n    <h2>{`Categories`}</h2>\n    <p>{`If you only need 1 or two colors, always use a blue because it generally looks good.`}</p>\n    <ColorDisp code=\"#4e79a7\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#f28e2c\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#e15759\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#76b7b2\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#59a14f\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#edc949\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#af7aa1\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#ff9da7\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#9c755f\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#bab0ab\" mdxType=\"ColorDisp\"></ColorDisp>\n    <p>{`We can import the color scheme, from the 'd3-scale-chromatic' package.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { schemeTableau10 } from 'd3-scale-chromatic';\n\nconsole.log(schemeTableau10) // array of hex codes for colors above ^\n`}</code></pre>\n    <p>{`We can also setup a scale to keep track of which color goes with each category.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { scaleOrdinal } from 'd3-scale';\nconst colorScale = scaleOrdinal().range(schemeTableau10);\n\ncolorScale(\"category1\") // \"#4e79a7\n`}</code></pre>\n    <p>{`Here are other nice colors to use:`}</p>\n    <ColorDisp code=\"#08519C\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#005AA3\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#D96942\" mdxType=\"ColorDisp\"></ColorDisp>\n    <ColorDisp code=\"#EDC949\" mdxType=\"ColorDisp\"></ColorDisp>\n    <p>{`Try to avoid using the light values such as the yellow or pink unless you have a lot of categories. Don't use a\nblue and yellow that look like UCSB colors together if the data is not from/about UCSB.`}</p>\n    <p>{`If we need to change the color for a bar/text/arrow it's very difficult to look through code and know which hex codes to change.`}</p>\n    <p><strong parentName=\"p\">{`Please use objects to give hex codes labels and keep in them in one place`}</strong>{`. If you are using a blue and orange from the list above, create an object such as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const colors = {\n    blue: \"#4e79a7\",\n    red: \"#f28e2c\"\n}\n`}</code></pre>\n    <p>{`or category names such as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const colors = {\n    undergrads: \"#4e79a7\",\n    grads: \"#f28e2c\"\n}\n`}</code></pre>\n    <p>{`And then if you ever want to use that blue you can just give the value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`colors.blue\n`}</code></pre>\n    <p>{`which will make the code a lot more readable and easier to change colors in the future`}</p>\n    <h2>{`Continuous Colors`}</h2>\n    <p>{`We can use continuous color scales such as the one below to emphasize the low and high values of continuous data.`}</p>\n    <img src=\"../../static/images/colorScaleBlues.png\" height=\"30px\"></img>\n    <p>{`The following code creates a scale to use this color scale:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { interpolateBlues } from 'd3-scale-chromatic';\nimport { scaleSequential } from 'd3-scale';\n\nconst colorScale = scaleSequential().interpolator(interpolateBlues);\ncolorScale(0) // color code\n`}</code></pre>\n    <p>{`For more colors you can checkout `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/d3/d3-scale-chromatic\"\n      }}>{`the d3 scale-chromatic docs`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","ColorDisp","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","src","code","parentName","height","isMDXComponent"],"sourceRoot":""}