"use strict";(self.webpackChunkguide=self.webpackChunkguide||[]).push([[63],{5731:function(e,a,n){n.r(a),n.d(a,{_frontmatter:function(){return i},default:function(){return m}});var t=n(3366),r=(n(7294),n(4983)),s=n(3076),l=n(2407),o=["components"],i={},p={_frontmatter:i},u=s.Z;function m(e){var a=e.components,n=(0,t.Z)(e,o);return(0,r.kt)(u,Object.assign({},p,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",null,"Data Wrangling and Manipulation in JS"),(0,r.kt)("p",null,"This guide goes over 3 major concepts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Array Operations"),(0,r.kt)("li",{parentName:"ul"},"Javascript Objects"),(0,r.kt)("li",{parentName:"ul"},"Wrangling in D3")),(0,r.kt)("h2",null,"Array Operations"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const myArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n")),(0,r.kt)("h3",null,"Map"),(0,r.kt)("p",null,"Map returns an array where a function is applied to each element of the original array."),(0,r.kt)("p",null,"Using ",(0,r.kt)("inlineCode",{parentName:"p"},".map()")," to return an array of the squares of ",(0,r.kt)("inlineCode",{parentName:"p"},"myArr"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const squares = myArr.map(x => x**2);\nconsole.log(squares); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\n")),(0,r.kt)(l.S,{src:"../../images/arrayMapExample.png",alt:"text",mdxType:"StaticImage",__error:'No data found for image "../../images/arrayMapExample.png"\n              undefinedCould not read image data file "C:\\nexus\\data-gh\\guide\\.cache\\caches\\gatsby-plugin-image\\2323044451.json". \nThis may mean that the images in "C:\\nexus\\data-gh\\guide\\src\\guides\\wrangling.md" were not processed.\nPlease ensure that your gatsby version is at least 2.24.78.'}),(0,r.kt)("p",null,"We can also use more complex functions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const factorials = myArr.map((x) => {\n    let prod = 1;\n    for (let i = 1; i <= x; ++i) {\n        prod *= i;\n    }\n    return prod;\n});\nconsole.log(factorials); // [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n")),(0,r.kt)("p",null,"The index of the element is passed in as the second item:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const indices = myArr.map((x, i) => i)\nconsole.log(indices) // [0, 1, 2, 3, 4, 5, 6, 7, 8]\n")),(0,r.kt)("h3",null,"Filter"),(0,r.kt)("p",null,"Filter returns an array of elements in the original array that meet a condition."),(0,r.kt)("p",null,"Get the even numbers of the array using ",(0,r.kt)("inlineCode",{parentName:"p"},".filter()"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"%")," is the modulus operator which returns the remained after a division. When you divide an even number by 2, there should be a remainder of zero. .filter() returns the values where the passed in function returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const evenNumbers = myArr.filter(x => x % 2 === 0);\nconsole.log(evenNumbers); // [2, 4, 6, 8]\n")),(0,r.kt)(l.S,{src:"../../images/arrayFilterExample.png",alt:"text",mdxType:"StaticImage",__error:'No data found for image "../../images/arrayFilterExample.png"\n              undefinedCould not read image data file "C:\\nexus\\data-gh\\guide\\.cache\\caches\\gatsby-plugin-image\\1197811791.json". \nThis may mean that the images in "C:\\nexus\\data-gh\\guide\\src\\guides\\wrangling.md" were not processed.\nPlease ensure that your gatsby version is at least 2.24.78.'}),(0,r.kt)("h2",null,"Javascript Objects"),(0,r.kt)("p",null,"Objects are key-value collections of data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const myObj = {\n    name: "Labyrinth",\n    nWriters: 5\n};\n')),(0,r.kt)("p",null,"We can access items by their key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'console.log(myObj.name); // "Labyrinth"\n')),(0,r.kt)("h3",null,"Object Destructuring"),(0,r.kt)("p",null,"We can values out of objects into individual variables with the same name as follows: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const { name, nWriters } = myObj;\nconsole.log(name, nWriters) // "Labyrinth", 5\n')),(0,r.kt)("h2",null,"Wrangling with D3"),(0,r.kt)("p",null,"Often times our data will be arrays of objects. This array contains data for 3 students."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const students = [\n    { major: "Math", gpa: 3.00 },\n    { major: "Compsci", gpa: 3.50 },\n    { major: "Compsci", gpa: 3.75 }\n]\n')),(0,r.kt)("h3",null,"d3.max()"),(0,r.kt)("p",null,"We can get the max gpa of all students:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const maxGpa = d3.max(students, d => d.gpa)\nconsole.log(maxGpa) // 3.75\n")),(0,r.kt)("p",null,"The first argument passed into ",(0,r.kt)("inlineCode",{parentName:"p"},"d3.max()")," has to be an array of values, then the second argument can be a function that returns a value for each element in the passed in array."),(0,r.kt)("h3",null,"d3.nest()"),(0,r.kt)("p",null,"Often, we'll want to group data by a common value. Here, we're going to group together students with the same major using ",(0,r.kt)("inlineCode",{parentName:"p"},"d3.nest()")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const nestedData = d3Collection\n    .nest()\n    .key((d) => d.major)\n    .entries(students)\n\nconsole.log(nestedData)\n// [\n//   { \n//       key: 'Math', \n//       values: [ { major: 'Math', gpa: 3 } ],\n//   },\n//   { \n//       key: 'Compsci', \n//       values: [ \n//           { major: 'Compsci', gpa: 3.5 }, \n//           { major: 'Compsci', gpa: 3.75 } \n//       ] \n//   }\n// ]\n")),(0,r.kt)("p",null,"Here, we tell d3 that we want to group values by the major, by passing in a function to get the major value in ",(0,r.kt)("inlineCode",{parentName:"p"},".key()"),". Then we pass the entire array in with ",(0,r.kt)("inlineCode",{parentName:"p"},".entries()"),"."),(0,r.kt)("p",null,"If we wanted to get the max GPA by department, we can map this array and then use ",(0,r.kt)("inlineCode",{parentName:"p"},"d3.max()")," to get the max value form each department's ",(0,r.kt)("inlineCode",{parentName:"p"},"values")," key."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const maxGpaByDept = nestedData.map(({ key, values }) => ({\n    key,\n    maxGPA: d3.max(values, (d) => d.gpa),\n}));\n\nconsole.log(maxGpaByDept);\n// [ { key: 'Math', maxGPA: 3 }, { key: 'Compsci', maxGPA: 3.75 } ]\n")))}m.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-guides-wrangling-md-74b9b33bfc4420826177.js.map