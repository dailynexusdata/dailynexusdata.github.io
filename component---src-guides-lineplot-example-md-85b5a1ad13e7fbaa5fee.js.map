{"version":3,"file":"component---src-guides-lineplot-example-md-85b5a1ad13e7fbaa5fee.js","mappings":"8OAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,sFACA,mIACA,oBAAK,gBAAMC,WAAW,MAClB,UAAa,eADZ,kHAKL,mFAAqE,sBAAYA,WAAW,KAAvB,UAArE,eACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,2BAIL,qMACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,gOAiBL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,kVAaL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,uRAiBL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,kPAeTJ,EAAWK,gBAAiB","sources":["webpack://guide/./src/guides/lineplotExample.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/nexus/data-gh/guide/src/components/layout/layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`This tutorial will be following on after the Bar Chart Example. `}</p>\n    <p>{`Create a new file in the plots directory called 'linePlot.js'. Inside of the index.js file, import this file,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// import at the top of index.js after the bar chart import\nimport makeLinePlot from '../plots/linePlot';\n`}</code></pre>\n    <p>{`And call the function passing in the same data inside of  the `}<inlineCode parentName=\"p\">{`resize`}</inlineCode>{` function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`makeLinePlot(data);\n`}</code></pre>\n    <p>{`Setup 'linePlot.js' by using the 'start' short code as done before. Make the id for this plot be: '#nexus-example-line-plot'. Then add another div to 'index.ejs' with this id.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lineData = data.map((d) => [\n    {\n        year: 2019,\n        val: d[2019],\n    },\n    {\n        year: 2020,\n        val: d[2020],\n    },\n    {\n        year: 2021,\n        val: d[2021],\n    },\n]);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { scalePoint } from \"d3-scale\";\nimport { max } from \"d3-array\";\n\nconst x = scalePoint()\n    .domain([2019, 2020, 2021])\n    .range([margin.left, size.width - margin.right]);\n\nconst y = scaleLinear()\n    .domain([0, max(lineData, (d) => max(d, (v) => v.val))])\n    .range([size.height - margin.bottom, margin.top]);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { line } from 'd3-shape';\n\nconst myLine = line()\n.x((d) => x(d.year))\n.y((d) => y(d.val));\n\nsvg\n    .selectAll('lines')\n    .data(lineData)\n    .enter()\n    .append('path')\n    .attr('d', myLine)\n    .attr('stroke', 'black')\n    .attr('fill', 'none');\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { axisBottom } from 'd3-axis';\n\nsvg\n    .append('g')\n    .style('color', '#adadad')\n    .style('font-size', '12pt')\n    .attr('transform', \\`translate(0, \\${size.height - margin.bottom})\\`)\n    .call(axisBottom().scale(x));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}