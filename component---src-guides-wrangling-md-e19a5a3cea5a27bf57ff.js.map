{"version":3,"file":"component---src-guides-wrangling-md-e19a5a3cea5a27bf57ff.js","mappings":"8OAQaA,EAAe,GACtBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,4DACA,4DACA,mBACE,cAAIC,WAAW,MAAf,qBACA,cAAIA,WAAW,MAAf,uBACA,cAAIA,WAAW,MAAf,qBAEF,uCACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,iDAIL,0BACA,yHACA,yBAAW,sBAAYA,WAAW,KAAvB,UAAX,0CAAuG,sBAAYA,WAAW,KAAvB,SAAvG,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,yGAKL,kBAAG,eAAKA,WAAW,IACf,IAAO,0CACP,IAAO,WAEX,6DACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,gOAWL,gFACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,mGAKL,6BACA,gIACA,kBAAG,sBAAYA,WAAW,KAAvB,aAAH,iBAAyE,sBAAYA,WAAW,KAAvB,QAAzE,6DAAsL,sBAAYA,WAAW,KAAvB,KAAtL,gLAAmZ,sBAAYA,WAAW,KAAvB,SAAnZ,WAA+c,sBAAYA,WAAW,KAAvB,aAA/c,MACA,kBAAG,eAAKA,WAAW,IACf,IAAO,6CACP,IAAO,SAEX,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,sGAKL,yCACA,gEACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,oEAOL,uDACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,+CAIL,2CACA,sFACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,wFAKL,wCACA,8GACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,2IAQL,+BACA,iEACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,gHAOL,oDAAsC,sBAAYA,WAAW,KAAvB,YAAtC,iIACA,gCACA,+IAAiI,sBAAYA,WAAW,KAAvB,aAAjI,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,4aAuBL,sDAAwC,sBAAYA,WAAW,KAAvB,UAAxC,2IAAqO,sBAAYA,WAAW,KAAvB,cAArO,MACA,gFAAkE,sBAAYA,WAAW,KAAvB,cAAlE,wBAAgJ,sBAAYA,WAAW,KAAvB,YAAhJ,gDAAoP,sBAAYA,WAAW,KAAvB,UAApP,UACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,6NAcTJ,EAAWK,gBAAiB","sources":["webpack://guide/./src/guides/wrangling.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/nexus/data-gh/guide/src/components/layout/layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Data Wrangling and Manipulation in JS`}</h1>\n    <p>{`This guide goes over 3 major concepts:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Array Operations`}</li>\n      <li parentName=\"ul\">{`Javascript Objects`}</li>\n      <li parentName=\"ul\">{`Wrangling in D3`}</li>\n    </ul>\n    <h2>{`Array Operations`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n`}</code></pre>\n    <h3>{`Map`}</h3>\n    <p>{`Map applies a function to each element of an array and returns a new array of the function outputs.`}</p>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`.map()`}</inlineCode>{` to return an array of the squares of `}<inlineCode parentName=\"p\">{`myArr`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const squares = myArr.map(x => x**2);\nconsole.log(squares); // [1, 4, 9, 16, 25, 36, 49, 64, 81]\n`}</code></pre>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"../../static/images/arrayMapExample.png\",\n        \"alt\": \"test\"\n      }}></img></p>\n    <p>{`We can also use more complex functions:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const factorials = myArr.map((x) => {\n    let prod = 1;\n    for (let i = 1; i <= x; ++i) {\n        prod *= i;\n    }\n    return prod;\n});\nconsole.log(factorials); // [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n`}</code></pre>\n    <p>{`The index of each element is passed in as the second item:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const indices = myArr.map((x, i) => i)\nconsole.log(indices) // [0, 1, 2, 3, 4, 5, 6, 7, 8]\n`}</code></pre>\n    <h3>{`Filter`}</h3>\n    <p>{`The filter operation returns an array of elements from the original array that meet a specified condition.`}</p>\n    <p><inlineCode parentName=\"p\">{`.filter()`}</inlineCode>{` returns the `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` values from the elements passed through a function. The `}<inlineCode parentName=\"p\">{`%`}</inlineCode>{` is the modulus operator which returns the remainder after division. When you divide an even number by 2, there will always be a remainder of zero. Get the even numbers of `}<inlineCode parentName=\"p\">{`myArr`}</inlineCode>{` using `}<inlineCode parentName=\"p\">{`.filter()`}</inlineCode>{`.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"../../static/images/arrayFilterExample.png\",\n        \"alt\": null\n      }}></img></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const evenNumbers = myArr.filter(x => x % 2 === 0);\nconsole.log(evenNumbers); // [2, 4, 6, 8]\n`}</code></pre>\n    <h2>{`Javascript Objects`}</h2>\n    <p>{`Objects are key-value collections of data.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myObj = {\n    name: \"Labyrinth\",\n    nWriters: 5\n};\n`}</code></pre>\n    <p>{`We can access items by their key:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`console.log(myObj.name); // \"Labyrinth\"\n`}</code></pre>\n    <h3>{`Object Destructuring`}</h3>\n    <p>{`We can turn object values into individual variables as follows: `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const { name, nWriters } = myObj;\nconsole.log(name, nWriters) // \"Labyrinth\", 5\n`}</code></pre>\n    <h2>{`Wrangling with D3`}</h2>\n    <p>{`Oftentimes, our data will be arrays of objects. This array contains data for 3 students.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const students = [\n    { major: \"Math\", gpa: 3.00 },\n    { major: \"Compsci\", gpa: 3.50 },\n    { major: \"Compsci\", gpa: 3.75 }\n]\n`}</code></pre>\n    <h3>{`d3.max()`}</h3>\n    <p>{`We can get the maximum gpa of all students:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { max } from \"d3-array\";\n\nconst maxGpa = max(students, d => d.gpa)\nconsole.log(maxGpa) // 3.75\n`}</code></pre>\n    <p>{`The first argument passed into `}<inlineCode parentName=\"p\">{`d3.max()`}</inlineCode>{` must be an array of values. Then, the second argument can be a function that returns a value for each element of the array.`}</p>\n    <h3>{`d3.nest()`}</h3>\n    <p>{`Often, we'll want to group data by a common value. Here, we're going to group together students with the same major using `}<inlineCode parentName=\"p\">{`d3.nest()`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { nest } from \"d3-collection\";\n\nconst nestedData = nest()\n    .key((d) => d.major)\n    .entries(students)\n\nconsole.log(nestedData)\n// [\n//   { \n//       key: 'Math', \n//       values: [ { major: 'Math', gpa: 3 } ],\n//   },\n//   { \n//       key: 'Compsci', \n//       values: [ \n//           { major: 'Compsci', gpa: 3.5 }, \n//           { major: 'Compsci', gpa: 3.75 } \n//       ] \n//   }\n// ]\n`}</code></pre>\n    <p>{`Here, we pass a function through `}<inlineCode parentName=\"p\">{`.key()`}</inlineCode>{` for the major value. This tells d3 to group the data by major. Then, we pass the entire array through by entering the array name into `}<inlineCode parentName=\"p\">{`.entries()`}</inlineCode>{`.`}</p>\n    <p>{`If we want to get the maximum GPA by major, we can map the `}<inlineCode parentName=\"p\">{`nestedData`}</inlineCode>{` array and then use `}<inlineCode parentName=\"p\">{`d3.max()`}</inlineCode>{` to get the maximum value from each major's `}<inlineCode parentName=\"p\">{`values`}</inlineCode>{` key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const maxGpaByDept = nestedData.map({ key, values }) => ({\n    key,\n    maxGPA: max(values, (d) => d.gpa),\n}));\n\nconsole.log(maxGpaByDept);\n// [ { key: 'Math', maxGPA: 3 }, { key: 'Compsci', maxGPA: 3.75 } ]\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}